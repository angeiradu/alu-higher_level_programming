# 0-add_integer.py
===========================
how to use 0-add_integer.py
===========================

This is a function of an interger addition ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments,
that value is equivalent to using the ``+``.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 4)
    9

::

    >>> add_integer(-5, 4)
    -9

The function also receives float numbers.

::

    >>> add_integer(6.0, 2.0)
    8
Floats are casted to ints before addition is performed.

::

    >>> add_integer(8.2, 4.1)
    12

::

    >>> add_integer(-1.5, -3.2)
    1

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -1)
    3

The default value of  parameter b is 98,
If the function only recieves one parameter it will be added to this default value

::

    >>> add_integer(5)
    103

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
